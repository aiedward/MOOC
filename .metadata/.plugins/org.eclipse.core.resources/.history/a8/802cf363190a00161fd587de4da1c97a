package JaccardSimil;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;

import com.sun.javafx.collections.MappingChange.Map;

public class Tool {
	
	private int SimilMatrix[][];
	ArrayList<Topic> topicList;
	
	
	public ArrayList<String> getData() throws IOException{
			
		FileInputStream inputFile = new FileInputStream("./test.txt");
		
		
		
		// Construct BufferReader from inputStreamReader
		BufferedReader fileReader = new BufferedReader(new InputStreamReader(inputFile));

		
		// Topics included in the Layer, the type of the keywords is currently 'Activity'
		String[] matchingTarget = fileReader.readLine().split(",");
		topicList = new ArrayList<Topic>();
		
		
		// adding topics to topic list
		System.out.println("Current target type is 'activity'  ");
		for(String keyword : matchingTarget){
			topicList.add(new Topic(keyword));
					
		}
		// delete null index
		topicList.remove(0);
		
		this.SimilMatrix = new int[topicList.size()][topicList.size()];
		
	
		final ArrayList<String> postingList = new ArrayList<String>();
		
		String line = null;
		String[] lineArr;
		
		// temporary arraylist to store intersection
		ArrayList<String> tempKeywords = new ArrayList<String>();
		//ArrayList<Integer> tempIndex = new ArrayList<Integer>();
		//HashMap<Integer, ArrayList<Integer>> IndexMap = new HashMap<Integer, ArrayList<Integer>>();
		int count =0;
		// read url line by line 
		while ( (line = fileReader.readLine()) != null){
			
			count++;
						
			tempKeywords.clear();
			
			line.replace("  ", " ");
			line.replace("   ", " ");
					
			lineArr = line.split(" ");
			for( String token : lineArr){

				for(int i=0; i<topicList.size(); i++){
					if( topicList.get(i).compare(token)){
						tempKeywords.add(topicList.get(i).name);
										
					}
					
				}
			}
			
			
			// 한 포스팅 내에 스타벅스라는 단어가 두번 들어갔을 경우때문에 현재 전체 frequency보다 [i][i] 에 해당하는 value가 더 높음..
			if(tempKeywords.size() > 0){
				System.out.println("size of co-occurrence list " + tempKeywords.size());
				// add co-occurrence count(intersection) to Similarity Matrix
				for(int i=0; i<tempKeywords.size(); i++){
					for( int j=i; j<tempKeywords.size(); j++){
						this.SimilMatrix[getIndexByname(tempKeywords.get(i))][getIndexByname(tempKeywords.get(j))]++;
								
						System.out.println("line index " + count + "- adding intersection count to - "
								+ tempKeywords.get(i) + " , " + tempKeywords.get(j)
								+ " currently count of SimilMatrix["+getIndexByname(tempKeywords.get(i))
								+"]["+getIndexByname(tempKeywords.get(j))+"] = " 
								+  this.SimilMatrix[getIndexByname(tempKeywords.get(i))][getIndexByname(tempKeywords.get(j))]);
						
					}										
					
				}
			}
		
		}
		
		
		
		fileReader.close();
		
		// make matrix symmetric
		for(int i=0; i<topicList.size(); i++){
			for( int j=i; j<topicList.size(); j++){
				if(i==j){
					continue;
					
				}else{
					this.SimilMatrix[j][i] = this.SimilMatrix[i][j]; 
				}				
			}										
			
		}
		
		
		
		for(int i=0; i<topicList.size(); i++){
			System.out.println(topicList.get(i).name + "'s frequency = " + topicList.get(i).tf);
		}
		
		writeIntersectionData("intersection_count");
		
		calculateSimilarity();
		
		
		writeSimilarityData("Jaccard_Similarity");
		
		
			
		return postingList; 
		
	}
	
	private void calculateSimilarity() {
		// TODO Auto-generated method stub
		int intersection, union;
		for(int i=0; i<topicList.size(); i++){
			for(int j=0; j<topicList.size(); j++){
				 
				if(i==j){
					continue;
				}else{
					
					intersection = this.SimilMatrix[i][j];
					union = topicList.get(i).tf + topicList.get(j).tf - intersection;
					this.SimilMatrix[i][j] = intersection/ union;
					
					
				}
					
				
			}
		}
	}

	public int getIndexByname(String name){
		for(int i=0; i<topicList.size();i++){
			if(topicList.get(i).name.equals(name.toLowerCase())){
				return i;
			}
		}
		return -1;
	}
	
	
	public void writeIntersectionData(String filename){
		String name = "./"+filename+".txt";
		try{
	    	////////////////////////////////////////////////////////////////
			BufferedWriter out = new BufferedWriter(new FileWriter(name));
	    	String s = "before calculating Jaccard similarity";
	    	      
	    	out.write(s);out.newLine();
	    	
	    	for(int i=0; i< topicList.size(); i++){
	    		s = "\t" + topicList.get(i).name;
	    		out.write(s);
	    	}
	    	out.newLine();
	    	
	    	for(int i=0; i< topicList.size(); i++){
	    		s = topicList.get(i).name + "\t";
	    		out.write(s);
	    		for(int j =0; j<topicList.size(); j++){
	    			s = Integer.toString(this.SimilMatrix[i][j]) + "\t";
	    			out.write(s);
	    		}
	    		out.newLine();
	    		
	    	}
	    	out.close();
	    	   	
	    	   
	    	}catch (IOException e){
	    		System.err.println(e); 
	    	    System.exit(1);
	    	}

	}
	
	public void writeSimilarityData(String filename){
		String name = "./"+filename+".txt";
		try{
	    	////////////////////////////////////////////////////////////////
			BufferedWriter out = new BufferedWriter(new FileWriter(name));
	    	String s = "before calculating Jaccard similarity";
	    	      
	    	out.write(s);out.newLine();
	    	
	    	for(int i=0; i< topicList.size(); i++){
	    		s = "\t" + topicList.get(i).name;
	    		out.write(s);
	    	}
	    	out.newLine();
	    	
	    	for(int i=0; i< topicList.size(); i++){
	    		s = topicList.get(i).name + "\t";
	    		out.write(s);
	    		for(int j =0; j<topicList.size(); j++){
	    			s = Integer.toString(this.SimilMatrix[i][j]) + "\t";
	    			out.write(s);
	    		}
	    		out.newLine();
	    		
	    	}
	    	out.close();
	    	   	
	    	   
	    	}catch (IOException e){
	    		System.err.println(e); 
	    	    System.exit(1);
	    	}

	}
	
	
}
