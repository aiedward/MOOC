import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


public class Tool {
	
	boolean endData=false;
	int page = 1;
	int index = 0;
	ArrayList<Integer> pagelist = new ArrayList<Integer>();
	ArrayList<String> instructorList = new ArrayList<String>();
	
	Data courseData = new Data();
	final WebDriver driver = new FirefoxDriver();
	int urlSize = 0;
	
	public ArrayList<String> getVideoURL() throws IOException{
		
		driver.navigate().to("https://www.edx.org/course");
		
		final ArrayList<String> urlList = new ArrayList<String>();
		boolean plag = false;
		int position = 1000;
		while(!plag){
			
			((JavascriptExecutor)driver).executeScript("scroll(0,"+position + ")");
						
			if(! (driver.findElements(By.cssSelector("[class='loading']")).size() > 0)){
				plag = true;
			}
			
					
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			position += 1000;
			
			
		}
		
		ArrayList <WebElement> url_list = new ArrayList<WebElement>(driver.findElements(By.cssSelector("div.course-card")));
			
		int size_of_url = url_list.size();
		
		for(int i=0; i<size_of_url; i++){
			
			String url = url_list.get(i).findElement(By.tagName("a")).getAttribute("href").toString();
			
			// xseries 강의들은 제외하고 list에 담는다.
			if(url.contains("xseries")){
				continue;
			}else{
				urlList.add(url);
				System.out.println(url);
			}
			
			
		}
			
			
		
		/*
		FileInputStream inputFile = new FileInputStream("./courses_url_edX.txt");
		
		// Construct BufferReader from inputStreamReader
		BufferedReader fileReader = new BufferedReader(new InputStreamReader(inputFile));
		
		
		
		String line = null;
		
		// read url line by line 
		while ( (line = fileReader.readLine()) != null){
			urlList.add(line);
		}
		
		fileReader.close();
		*/
		
		
		urlSize = urlList.size();
		System.out.println("size of url - " + urlSize);
		
		return urlList; 
		
	}
		
	/*
	 * End of get All url function
	 */
	
	/*
	 * creatDomRoot
	 * 
	 */
	
	
	org.w3c.dom.Document newCreatedDocument = null;
	
	synchronized public org.w3c.dom.Document createDomRoot(){
		System.out.println("----------------Root create-----------------");

		try {
			newCreatedDocument = DocumentBuilderFactory.newInstance()
					.newDocumentBuilder().newDocument();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
		org.w3c.dom.Node root = newCreatedDocument.createElement("ROOT");
		newCreatedDocument.appendChild(root);
		return newCreatedDocument;
		
	}
	
	/*
	 * Crawl data.
	 * 
	 */
	
	public void crawlData(final String url, final Integer index) throws IOException{
		
		
		
		// open website
		driver.navigate().to(url);
				
		// sleep 5 seconds to wait until onload
		try{
			Thread.sleep(1000*5);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		// newCreatedDocument is destination of XML.
		NodeList nodelist=newCreatedDocument.getElementsByTagName("ROOT");
		Node root=nodelist.item(0);
				
		
		Data data = new Data();
						
		data.url = url;
		
		data.id = driver.findElement(By.id("course-info-page")).getAttribute("data-course-id").toString();
		System.out.println(data.id);

	
		ArrayList <WebElement> metadata = new ArrayList <WebElement> (driver
				.findElements(By.tagName("meta")));
		
		System.out.println("meta data size - " + metadata.size());
		
		
		
		for(int i=0; i<metadata.size(); i++){
			WebElement element = metadata.get(i);
			
			if(element.getAttribute("property") == null){
				continue;
			}
								
			if(element.getAttribute("property").equals("og:title")){
				//course title
				data.title = element.getAttribute("content").toString();
				System.out.println("title - " +data.title);
				
			}else if(element.getAttribute("property").equals("og:description")){
				//course intro
				data.intro = element.getAttribute("content").toString();
				System.out.println("intro - " +data.intro);
				
			}else if(element.getAttribute("property").equals("article:published_time")){
				// course published time
				data.date = element.getAttribute("content").toString();
				System.out.println("published date - " +data.date);
				
				// break loop when assign three values
				break;
			}
			
		}

		// Parsing course-Summary
		//System.out.println(driver.findElement(By.id("course-summary-area")).findElements(By.cssSelector("li")).get(1).getText());
		
		ArrayList <WebElement> Summary = new ArrayList <WebElement> (driver.findElement(By.id("course-summary-area"))
				.findElements(By.cssSelector("li")) );
		
		for(int i=0; i<Summary.size(); i++){
			
			if(Summary.get(i).getAttribute("data-field") == null){
				continue;
			}
			
			if(Summary.get(i).getAttribute("data-field").equals("school")){
				data.school = Summary.get(i).getText();
				System.out.println("school - " + data.school);
			}else if(Summary.get(i).getAttribute("data-field").equals("subject")){
				data.subject = Summary.get(i).getText();
				System.out.println("subject - " + data.subject);
			}else if(Summary.get(i).getAttribute("data-field").equals("price")){
				data.price = Summary.get(i).getText();
				System.out.println("Price - " + data.price);
				
			}else if(Summary.get(i).getAttribute("data-field").equals("level")){
				data.level = Summary.get(i).getText();
				System.out.println("level - " + data.level); 
			}else if(Summary.get(i).getAttribute("data-field").equals("language")){
			
				try{
					data.language = Summary.get(i).getText();
				}catch(Exception e){
					data.language = "no language";
				}
				// break loop when assign three values
				break;
			}
			
		}
		
		// Parsing course-about
		
		ArrayList <WebElement> course_Detail = new ArrayList <WebElement> (driver.findElement(By.id("course-about-area"))
				.findElements(By.cssSelector("div.content-grouping")) );
		
		List<WebElement> more_content = course_Detail.get(0).findElements(By.cssSelector("p.see-more-content"));
		
		if(more_content.size()>0){
			more_content.get(0).click();
		}
		
		try{
			data.description = course_Detail.get(0).findElement(By.cssSelector("div.see-more-content")).getText();
			System.out.println("description - " + data.description);
			
		}catch(Exception e){
			data.description = "no description";
		}
		
		try{

			data.learnAbout = course_Detail.get(1).findElement(By.cssSelector("ul")).getText().toString();
			System.out.println("What you'll learn - " + data.learnAbout);
			
		}catch(Exception e){
			data.learnAbout = "no info";
		}
		
		// Parsing instructor page
		ArrayList <WebElement> instructors = new ArrayList <WebElement> 
			(driver.findElements(By.cssSelector("li.list-instructor__item")));
		
		for(WebElement instructor : instructors){
			instructorList.add(instructor.findElement(By.tagName("a")).getAttribute("href"));
			
		}
		

		// making dom elements
		
		org.w3c.dom.Element course_info = newCreatedDocument.createElement("CourseInfo");
						
		root.appendChild(course_info);
		{
			
			// index
			org.w3c.dom.Element course_id = newCreatedDocument
					.createElement("course_id");
			course_id.appendChild(newCreatedDocument.createTextNode(data.id));
			course_info.appendChild(course_id);
						
			// title
			org.w3c.dom.Element course_title = newCreatedDocument.createElement("title");
			course_title.appendChild(newCreatedDocument.createTextNode(data.title));
			course_info.appendChild(course_title);
			
			// published_date
			org.w3c.dom.Element published_date = newCreatedDocument.createElement("published_date");
			published_date.appendChild(newCreatedDocument.createTextNode(data.date));
			course_info.appendChild(published_date);

			// course intro
			org.w3c.dom.Element course_intro = newCreatedDocument.createElement("course_intro");
			course_intro.appendChild(newCreatedDocument.createTextNode(data.intro));
			course_info.appendChild(course_intro);

			// subject
			org.w3c.dom.Element course_subject = newCreatedDocument.createElement("subject");
			course_subject.appendChild(newCreatedDocument.createTextNode(data.subject));
			course_info.appendChild(course_subject);
			
			// price
			org.w3c.dom.Element course_price = newCreatedDocument.createElement("price");
			course_price.appendChild(newCreatedDocument.createTextNode(data.price));
			course_info.appendChild(course_price);
			
			// level
			org.w3c.dom.Element course_level = newCreatedDocument.createElement("level");
			course_level.appendChild(newCreatedDocument.createTextNode(data.level));
			course_info.appendChild(course_level);

			// school
			org.w3c.dom.Element course_school = newCreatedDocument.createElement("school");
			course_school.appendChild(newCreatedDocument.createTextNode(data.school));
			course_info.appendChild(course_school);
			
			
			// description
			org.w3c.dom.Element course_description = newCreatedDocument.createElement("description");
			if(data.description == null){
				course_description.appendChild(newCreatedDocument.createTextNode("no description"));
			}else{
				course_description.appendChild(newCreatedDocument.createTextNode(data.description));
			}		
			course_info.appendChild(course_description);
			
			// learn about
			org.w3c.dom.Element learn_about = newCreatedDocument.createElement("learn_about");
			if(data.learnAbout == null){
				learn_about.appendChild(newCreatedDocument.createTextNode("no learn"));
				
			}else{
				learn_about.appendChild(newCreatedDocument.createTextNode(data.learnAbout));
			}
			course_info.appendChild(learn_about);
			
			// url
			org.w3c.dom.Element course_url = newCreatedDocument.createElement("url");
			course_url.appendChild(newCreatedDocument.createTextNode(data.url));
			course_info.appendChild(course_url);
			
								
		}

		if(index == urlSize -1){
			System.out.println("Last page");
			driver.close();
			OutputStream output = new FileOutputStream("instructor_url.txt");
			
			for(String instructor : instructorList){
				System.out.println(instructor);
				try{
					output.write((instructor+'\n').getBytes());
				}catch(Exception e){
					
				}
								
			}
			output.close();
			
			
		}
	
	}

	
}
