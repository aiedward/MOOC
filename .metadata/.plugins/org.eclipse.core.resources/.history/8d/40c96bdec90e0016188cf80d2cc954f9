import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;



public class Tool {
	
	boolean endData=false;
	int page = 1;
	int index = 0;
	ArrayList<Integer> pagelist = new ArrayList<Integer>();
	ArrayList<String> instructorList = new ArrayList<String>();
	
	Data courseData = new Data();
	final WebDriver driver = new FirefoxDriver();
	int urlSize = 0;
	
	public ArrayList<String> getVideoURL() throws IOException{
		
		final ArrayList<String> urlList = new ArrayList<String>();
		
		FileInputStream inputFile = new FileInputStream("./instructor_url.txt");
		
		// Construct BufferReader from inputStreamReader
		BufferedReader fileReader = new BufferedReader(new InputStreamReader(inputFile));
		
		String line = null;
		
		// read url line by line 
		while ( (line = fileReader.readLine()) != null){
			urlList.add(line);
		}
		
		fileReader.close();

		
		
		urlSize = urlList.size();
		System.out.println("size of url - " + urlSize);
		
		return urlList; 
		
	}
		
	/*
	 * End of get All url function
	 */
	
	/*
	 * creatDomRoot
	 * 
	 */
	
	
	org.w3c.dom.Document newCreatedDocument = null;
	
	synchronized public org.w3c.dom.Document createDomRoot(){
		System.out.println("----------------Root create-----------------");

		try {
			newCreatedDocument = DocumentBuilderFactory.newInstance()
					.newDocumentBuilder().newDocument();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
		org.w3c.dom.Node root = newCreatedDocument.createElement("ROOT");
		newCreatedDocument.appendChild(root);
		return newCreatedDocument;
		
	}
	
	// To prevent occurring null pointer exception during transforming XML
	public static Text createTextNodeWithoutNull(Document doc, String str){
		Text textNode;
		if(str != null) textNode = doc.createTextNode(str);
		else textNode = doc.createTextNode("null");
		
		return textNode;
	}
	
	/*
	 * Crawl data.
	 * 
	 */
	
	public void crawlData(final String url, final Integer index) throws IOException{
		
		
		
		// open website
		driver.navigate().to(url);
				
		// sleep 10 seconds to wait until onload
		try{
			Thread.sleep(1000*5);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		// newCreatedDocument is destination of XML.
		NodeList nodelist=newCreatedDocument.getElementsByTagName("ROOT");
		Node root=nodelist.item(0);
				
		
		Data data = new Data();
						
		data.url = url;
		
		
		// instructor name
		data.name = driver.findElement(By.cssSelector("h1.instructor-title")).getText();
		
		
		
		ArrayList <WebElement> detailsInfo = (ArrayList<WebElement>) driver.findElement(By.cssSelector("ul.org-roles")).findElements(By.tagName("li"));
		
		
		if(detailsInfo.size()>1){
			
			data.job = detailsInfo.get(0).getText();
			data.institution = detailsInfo.get(1).getText();
			
		}else{
			data.job = "null";
			data.institution = "null";
		}
		
		data.resume = driver.findElement(By.cssSelector("p.resume-copy")).getText();
		
		ArrayList <WebElement> courseList = new ArrayList <WebElement> (driver
				.findElements(By.cssSelector("div.discovery-card")));
		
		data.size_of_courses = Integer.toString(courseList.size());
		
		for(WebElement element : courseList){
			element.findElement(By.className("course-code")).getText();
			element.findElement(By.className("title")).getText();
		}
		
		// making dom elements
		
		org.w3c.dom.Element instructor_info = newCreatedDocument.createElement("InstructorInfo");
						
		root.appendChild(instructor_info);
		{
			
			// name
			org.w3c.dom.Element name = newCreatedDocument
					.createElement("name");
			name.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.name));
			instructor_info.appendChild(name);
						
			// job
			org.w3c.dom.Element job = newCreatedDocument.createElement("job");
			job.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.job));
			instructor_info.appendChild(job);
			
			// published_date
			org.w3c.dom.Element published_date = newCreatedDocument.createElement("published_date");
			published_date.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.date));
			course_info.appendChild(published_date);

			// course intro
			org.w3c.dom.Element course_intro = newCreatedDocument.createElement("course_intro");
			course_intro.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.intro));
			course_info.appendChild(course_intro);

			// subject
			org.w3c.dom.Element course_subject = newCreatedDocument.createElement("subject");
			course_subject.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.subject));
			course_info.appendChild(course_subject);
			
			// price
			org.w3c.dom.Element course_price = newCreatedDocument.createElement("price");
			course_price.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.price));
			course_info.appendChild(course_price);
			
			// level
			org.w3c.dom.Element course_level = newCreatedDocument.createElement("level");
			course_level.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.level));
			course_info.appendChild(course_level);

			// school
			org.w3c.dom.Element course_school = newCreatedDocument.createElement("school");
			course_school.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.school));
			course_info.appendChild(course_school);
			
			
			// description
			org.w3c.dom.Element course_description = newCreatedDocument.createElement("description");
			course_description.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.description));
			
			course_info.appendChild(course_description);
			
			// learn about
			org.w3c.dom.Element learn_about = newCreatedDocument.createElement("learn_about");
					
			learn_about.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.learnAbout));
			course_info.appendChild(learn_about);
			
			// url
			org.w3c.dom.Element course_url = newCreatedDocument.createElement("url");
			course_url.appendChild(createTextNodeWithoutNull(newCreatedDocument, data.url));
			course_info.appendChild(course_url);
			
								
		}

		if(index == urlSize -1){
			System.out.println("Last page");
			driver.close();
			OutputStream output = new FileOutputStream("instructor_url.txt");
			
			for(String instructor : instructorList){
				System.out.println(instructor);
				try{
					output.write((instructor+'\n').getBytes());
				}catch(Exception e){
					
				}
								
			}
			output.close();
			
			
		}
	
	}
	
	

	
}
